import java.lang.String;
import java.util.Arrays;

public class AES {
	
	private static final char sbox[] = { 
			0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
			0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
			0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
			0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
			0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
			0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
			0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
			0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
			0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
			0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
			0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
			0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
			0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
			0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
			0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
			0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };
	
	private static final char inv_sbox[] = { 
			0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81,
			0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9,
			0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08,
			0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6,
			0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd,
			0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3,
			0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
			0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf,
			0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c,
			0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe,
			0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f,
			0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f,
			0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae,
			0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6,
			0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };
	
	private static final char rcon[] = {
		    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

	static int[] array_raw_data = {	0x32, 0x88, 0x31, 0xe0, 0x43, 0x5a, 0x31, 0x37,
									0xf6, 0x30, 0x98, 0x07, 0xa8, 0x8d, 0xa2, 0x34};
	
	static int[] array_cipher_key = {	0x2b, 0x28, 0xab, 0x09, 0x7e, 0xae, 0xf7, 0xcf,
										0x15, 0xd2, 0x15, 0x4f, 0x16, 0xa6, 0x88, 0x3c};
	
	static int[][] round_keys = new int[11][16];
	
	static int[] state = new int[16];

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("******* AES *******\n");
		
		genRoundKeys(Arrays.copyOf(array_cipher_key, 16));

		encrypt(array_raw_data,array_cipher_key);
		
		decrypt(state, array_cipher_key);

		
	}
	
	public static void encrypt(int[] plain_text, int[] key){
		initRound(plain_text,key);
		System.out.println("Plain Text: ");
		printBlock(plain_text);
		
		long start_time = System.nanoTime();
		long end_time = 0;
		
		for(int i = 1; i < 10; i++){
			subBytes();
			shiftRows();
			mixColumns();
			addRoundKey(i);
		}
		
		subBytes();
		shiftRows();
		addRoundKey(10);
		end_time = System.nanoTime();
		System.out.println("\nEncrypted: ");
		printBlock(state);
		System.out.println("Elapsed Time: "+(end_time-start_time)/1000+"ms\n\n");
	}
	
	public static void decrypt(int[] encrypted_data, int[] key){
		
		System.out.println("Encrypted Data: ");
		printBlock(encrypted_data);
		
		long start_time = System.nanoTime();
		long end_time = 0;
		
		addRoundKey(10);
		inv_shiftRows();
		inv_subBytes();
		
		for(int i = 9; i > 0; i--){
			addRoundKey(i);
			inv_mixColumns();
			inv_shiftRows();
			inv_subBytes();
		}
		
		initRound(state,key);
		end_time = System.nanoTime();
		System.out.println("Decrypted: ");
		printBlock(state);
		System.out.println("Elapsed Time: "+(end_time-start_time)/1000+"ms");
		
	}
	
	// initial round
	public static void initRound(int[] raw_data, int[] cipher){
		for(int i = 0; i < 16; i++){
			state[i] = raw_data[i]^cipher[i];
		}
	}	

	// sub bytes operation
	public static void subBytes() {
		for (int i = 0; i < 16; i++){
			state[i] = sbox[state[i] & 0xFF];
		}
	}
	
	public static void inv_subBytes(){
		for (int i = 0; i < 16; i++){
			state[i] = inv_sbox[state[i] & 0xFF];
		}
	}
	
	// shift rows operation
	public static void shiftRows(){

		int temp = state[4];
		state[4] = state[5];
		state[5] = state[6];
		state[6] = state[7];
		state[7] = temp;
		
		temp = state[8];
		int temp2 = state[9];
		state[8] = state[10];
		state[9] = state[11];
		state[10]= temp;
		state[11] = temp2;
		
		temp = state[15];
		state[15] = state[14];
		state[14] = state[13];
		state[13] = state[12];
		state[12] = temp;
		
	}
	
	public static void inv_shiftRows(){

		int temp = state[7];
		state[7] = state[6];
		state[6] = state[5];
		state[5] = state[4];
		state[4] = temp;
		
		temp = state[11];
		int temp2 = state[10];
		state[11] = state[9];
		state[10] = state[8];
		state[9]= temp;
		state[8] = temp2;
		
		temp = state[12];
		state[12] = state[13];
		state[13] = state[14];
		state[14] = state[15];
		state[15] = temp;
		
	}
	
//	public static int multi(int mat_i, int col_num){
//		int temp = col_num;
//			
//		col_num = (col_num << 1) & 0xFF;
//		if((temp & 0x80) == 0x80){
//			col_num = col_num ^ 0x1b;			
//		}
//			
//		if(mat_i % 2 != 0){
//			col_num = col_num ^ temp;
//		}
//		
//		return col_num;
//	}
	
	public static int GFMult(int a, int b) {
		int r = 0, t;
		while (a != 0) {
			if ((a & 1) != 0)
				r = (byte) (r ^ b);
			t = (byte) (b & 0x80);
			b = (byte) (b << 1);
			if (t != 0)
				b = (byte) (b ^ 0x1b);
			a = (byte) ((a & 0xff) >> 1);
		}
		return r & 0xff;
	}
	
	public static void mixColumns(){
		
		int[][] mc_matrix = {	{2,3,1,1},
								{1,2,3,1},
								{1,1,2,3},
								{3,1,1,2}};
		int r0,r1,r2,r3;
		
		for(int i = 0; i < 4; i++){
			
			r0 = GFMult(2,state[i]) ^ GFMult(3,state[i+4]) ^ state[i+8] ^ state[i+12];
			r1 = state[i] ^ GFMult(2,state[i+4]) ^ GFMult(3,state[i+8]) ^ state[i+12];
			r2 = state[i] ^ state[i+4] ^ GFMult(2,state[i+8]) ^ GFMult(3,state[i+12]);
			r3 = GFMult(3,state[i]) ^ state[i+4] ^ state[i+8] ^ GFMult(2,state[i+12]);
			
			state[i]    = r0;
			state[i+4]  = r1;
			state[i+8]  = r2;
			state[i+12] = r3;
		}
		

	}
	
	public static void inv_mixColumns(){
		
		int[][] mc_matrix = {	{14,11,13,9},
								{9,14,11,13},
								{13,9,14,11},
								{11,13,9,14}};
		int r0,r1,r2,r3;
		
		for(int i = 0; i < 4; i++){
			
			r0 = GFMult(14,state[i]) ^ GFMult(11,state[i+4]) ^ GFMult(13,state[i+8]) ^ GFMult(9,state[i+12]);
			r1 = GFMult(9,state[i]) ^ GFMult(14,state[i+4]) ^ GFMult(11,state[i+8]) ^ GFMult(13,state[i+12]);
			r2 = GFMult(13,state[i]) ^ GFMult(9,state[i+4]) ^ GFMult(14,state[i+8]) ^ GFMult(11,state[i+12]);
			r3 = GFMult(11,state[i]) ^ GFMult(13,state[i+4]) ^ GFMult(9,state[i+8]) ^ GFMult(14,state[i+12]);
			
			state[i]    = r0;
			state[i+4]  = r1;
			state[i+8]  = r2;
			state[i+12] = r3;
		}
		

	}
	
	public static void addRoundKey(int round){		
		for( int i = 0; i < 16; i++){
			state[i] = round_keys[round][i] ^ state[i];
		}
	}
	
	public static void genRoundKeys(int[] cipher){
		int last_col_rot[] = new int[4];
		int rcon[] = {0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
		
		int roundKey[] = cipher;
	
		for( int i = 1; i <= 10 ; i++){
			
			last_col_rot[0] = sbox[roundKey[7] & 0xFF];
			last_col_rot[1] = sbox[roundKey[11] & 0xFF];
			last_col_rot[2] = sbox[roundKey[15] & 0xFF];
			last_col_rot[3] = sbox[roundKey[3] & 0xFF];
			
			last_col_rot[0] = last_col_rot[0]^rcon[i];
			last_col_rot[1] = last_col_rot[1]^0x00;
			last_col_rot[2] = last_col_rot[2]^0x00;
			last_col_rot[3] = last_col_rot[3]^0x00;
			
			
			roundKey[0] = last_col_rot[0] ^ roundKey[0];
			roundKey[4] = last_col_rot[1] ^ roundKey[4];
			roundKey[8] = last_col_rot[2] ^ roundKey[8];
			roundKey[12] = last_col_rot[3] ^ roundKey[12];
			
			roundKey[1] = roundKey[0] ^ roundKey[1];
			roundKey[5] = roundKey[4] ^ roundKey[5];
			roundKey[9] = roundKey[8] ^ roundKey[9];
			roundKey[13] = roundKey[12] ^ roundKey[13];
			
			roundKey[2] = roundKey[1] ^ roundKey[2];
			roundKey[6] = roundKey[5] ^ roundKey[6];
			roundKey[10] = roundKey[9] ^ roundKey[10];
			roundKey[14] = roundKey[13] ^ roundKey[14];
			
			roundKey[3] = roundKey[2] ^ roundKey[3];
			roundKey[7] = roundKey[6] ^ roundKey[7];
			roundKey[11] = roundKey[10] ^ roundKey[11];
			roundKey[15] = roundKey[14] ^ roundKey[15];
			
			round_keys[i] = Arrays.copyOf(roundKey, 16);		
		}

	}
	
	public static void printBlock(int []array){
		System.out.println("---------------------------");
		for(int i = 0; i < array.length; i++){
			System.out.print(Integer.toHexString(array[i])+" | ");
			if((i+1)% 4 == 0){
				System.out.println("\n");
			}
		}
		System.out.println("---------------------------");
	}

}
